# -*- coding: utf-8 -*-
"""Iris Classification using KNN & LogisticRegression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/iris-classification-using-knn-logisticregression-e15b1467-e0ec-4eff-a4f7-b3c93a907810.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240710/auto/storage/goog4_request%26X-Goog-Date%3D20240710T194240Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D91072d1b88e313cc65f742b2ea90179a2b4bc99387c2e07b982b1c056c2beeb3d7ee02a9e506e9ddd647cffa12d8389b0ffea352a2b8ac2cf9b490332e003ca0a30d2a16946579566320a4627fa20024fcd70312d7eb9dadd9f3d992326bd151a481fd576e63def77cd6e27746d9d86270525a73fa81c2574211329f465ab5ebfde6c35f08e3108235066d2482a57e8eb33e327b7044c64231724fc9a71a6397ccd311efef49943154b119526fa3ac1b6bbd32612d1d853519cf80a8a7fd65ff530d1c82f78d15aed3911b30b9e7c64f13accd7d2f7cc483bf5140513043bfcf9c21a607a3430593a5fd837ea1776e27eae16efc7aab24897f3c2da1a737cd9c
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'iris-flower-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F17860%2F23404%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240710%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240710T194240Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D68ba24a18fc0a76aa41fc09d311f3607f30ec2db961593ef9e4846e95669f56ae044b73639da84d0e70a6779fbd47dbaff3ca4d7e891cf21edebaedc772f6f5ec87d9c0c59bc614bd3f04f739914677008066317ac1320c975a01174ad8ce6b3b902cbb73afb3dc40a2a005ca86131097481b7095a331f4c5d84bc0a89a9fd9cfd6f7bd3abbabbb303c60097c38cd4880ebe356eae073f52fe03f1cd3bb5be15d07c8469042263dadf433c0feef8040b7b7a9e019dd2dc399c494e17baca32c68993925989ff06e38846b82a3668b0fccad5635705b20de2e4d3ec97588ce9f10b6d41a37938a184269de637126412a42eacf382bd2469fe78d261e61ab685a2'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

"""## **Import Libraries**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msn

"""## **Read CSV file**"""

df=pd.read_csv(r"https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/IRIS.csv");

df.head()

df.tail()

df.shape

df.describe(include='all')

df.info()

msn.bar(df,color='blue');

df.corr();

df.info()

df['species'].unique()

df['species']=df['species'].map({'Iris-setosa':1, 'Iris-versicolor':2, 'Iris-virginica':3})

df.head()

"""## **Data Visualization**


"""

sns.countplot(df['species']);

sns.scatterplot(x='species', y='sepal_length', data=df);
# Pass x and y as keyword arguments and specify the data source

sns.scatterplot(x=df['species'], y=df['sepal_width']);
# Pass 'species' and 'sepal_width' as keyword arguments 'x' and 'y' respectively

sns.scatterplot(x=df['species'],y=df['petal_width']);

sns.scatterplot(x=df['species'],y=df['petal_length']);

sns.pairplot(df);

fig,ax=plt.subplots(figsize=(12,7));
sns.lineplot(data=df['sepal_length']);

fig,ax=plt.subplots(figsize=(12,7));
sns.lineplot(data=df['petal_length']);

fig,ax=plt.subplots(figsize=(12,7));
sns.lineplot(data=df['sepal_width'],);

df.columns

"""## **Defining X (feature variables) and y (target variable)**"""

X=df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]

y=df['species']

"""## **Splitting Dataset into training and testing by train_test_split**"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=22)

"""## ***1.Logistic Regression Model***"""

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(X_train,y_train)

y_pre=model.predict(X_test)

"""### **Model Evaluation**"""

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

print("Accuracy of the model by Logistic Regression is :-",accuracy_score(y_test,y_pre)*100)

print(confusion_matrix(y_test,y_pre))

print(classification_report(y_test,y_pre))

"""## ***2.KNN***"""

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier()

model.fit(X_train,y_train)

y_predict=model.predict(X_test)

sns.countplot(y_predict);

"""### **Model Evaluation**"""

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

print("Accuracy of the model by KNN is :-",accuracy_score(y_test,y_predict)*100)

print(confusion_matrix(y_test,y_predict))

print(classification_report(y_test,y_predict))

"""### **Enter Correct Details to Get Species**"""

#Manual Program
sepa_length=float(input("Enter sepal_length in float :-"))
sepa_width=float(input("Enter sepal_width in float :-"))
peta_length=float(input("Enter petal_length in float :-"))
peta_width=float(input("Enter petal_width in float :-"))
result=model.predict([[sepa_length,sepa_width,peta_length,peta_width]])
if(result==1):
  print("Species of Iris is Iris-setosa");
elif(result==2):
  print("Species of Iris is Iris-versicolor");
else:
  print("Species of Iris is Iris-virginica");

